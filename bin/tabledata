#!perl

# DATE
# VERSION

use 5.010001;
# IFUNBUILT
use strict;
use warnings;
# END IFUNBUILT

my %Opts = (
    #input_format => undef,
    output_format => "text",
);
my $Input; # envres
my $Input_Form;
my $Output; # envres

sub parse_cmdline {
    require Getopt::Long::EvenLess;
    my $res = Getopt::Long::EvenLess::GetOptions(
        'output-format|f=s'  => \$Opts{output_format},
        'version|v'        => sub {
            say "tabledata version ", ($main::VERSION // '?');
            exit 0;
        },
        'help|h'     => sub {
            print <<USAGE;
Usage:
  tabledata [OPTIONS] < INPUT
Options:
  --output-format=s, -f

Consult manpage/documentation for more details.
USAGE
            exit 0;
        },
    );
    exit 99 if !$res;
}

sub _decode_json {
    require JSON::XS;

    state $json = JSON::XS->new->allow_nonref;
    $json->decode(shift);
}

sub _encode_json {
    require JSON::XS;

    state $json = JSON->new->allow_nonref;
    $json->encode(shift);
}

sub get_input {
    require Data::Check::Structure;

    {
        local $/;
        $Input = _decode_json(~~<>);
    }

    die "Input is not table data\n" unless ref($Input) eq 'ARRAY';

    # give envelope if not enveloped
    unless (@$Input >= 2 && @$Input <= 4 &&
                $Input->[0] =~ /\A[2-5]\d\d\z/ &&
                !ref($Input->[1]) &&
                ref($Input->[2]) eq 'ARRAY'
            ) {
        $Input = [200, "Envelope added by tabledata", $Input];
    }

    # detect table form
    if (ref($Input->[2]) eq 'HASH') {
        $Input_Form = 'hash';
    } elsif (Data::Check::Structure::is_aos($Input->[2])) {
        $Input_Form = 'aos';
    } elsif (Data::Check::Structure::is_aoaos($Input->[2])) {
        $Input_Form = 'aoaos';
    } elsif (Data::Check::Structure::is_aohos($Input->[2])) {
        $Input_Form = 'aohos';
    } else {
        die "Input form is not recognizable as table (must be hash/aos/aoaos/aohos)\n";
    }
}

sub display_output {
    require Perinci::Result::Format::Lite;
    print Perinci::Result::Format::Lite::format(
        $Output, $Opts{output_format});
}

# MAIN

parse_cmdline();
get_input();
$Output = $Input;
display_output();

1;
# ABSTRACT: Manipulate table data
# PODNAME:

=head1 SYNOPSIS

Usage:

 % some-command-that-outputs-tabledata | tabledata <subcommand> [options ...]


=head1 DESCRIPTION

B<EARLY RELEASE. SOME FEATURES NOT YET IMPLEMENTED.>


=head1 OPTIONS


=head1 SEE ALSO

L<TableDef>

=cut
